name: Build and Release Sorting CLI

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21"

      - name: Run go test
        run: go test -v ./...

      - name: Build binary (macOS amd64)
        run: |
          GOOS=darwin GOARCH=amd64 go build -o sorting-darwin main.go

      - name: Build binary (macOS arm64)
        run: |
          GOOS=darwin GOARCH=arm64 go build -o sorting-darwin-arm64 main.go

      - name: Build binary (Linux amd64)
        run: |
          GOOS=linux GOARCH=amd64 go build -o sorting-linux main.go

      - name: Build binary (Linux arm64)
        run: |
          GOOS=linux GOARCH=arm64 go build -o sorting-linux-arm64 main.go

      - name: Build binary (Windows amd64)
        run: |
          GOOS=windows GOARCH=amd64 go build -o sorting.exe main.go

      - name: Get Next Available Version
        id: get_version
        run: |
          LATEST_TAG=$(git tag --list 'v*' | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_VERSION="v0.1.0"
          else
            BASE=$(echo $LATEST_TAG | awk -F. -v OFS=. '{$NF=""; sub(/\.$/, "", $0); print}')
            PATCH=$(echo $LATEST_TAG | awk -F. '{print $NF}')
            while true; do
              PATCH=$((PATCH + 1))
              CANDIDATE="${BASE}.${PATCH}"
              if ! git rev-parse "$CANDIDATE" >/dev/null 2>&1; then
                NEW_VERSION="$CANDIDATE"
                break
              fi
            done
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Create New Tag
        id: create_tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag $NEW_VERSION
          git push origin $NEW_VERSION

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          name: Release ${{ env.NEW_VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_VERSION }}
          files: |
            sorting-darwin
            sorting-darwin-arm64
            sorting-linux
            sorting-linux-arm64
            sorting.exe
